# A butterworth low-pass filter. This has a sharper cut-off than the elementary
# filters so it's more useful for audio. Start with a low pass elementary
# filter: a zero at -1, a pole at β Then use the formula to get the 'r' value:
# r = tan(β / 2). The 'n' value controls how sharp the roll-off is, but
# increases the amount of computation.
include:
patches:
sounds:
  - name: input
    sound_type: pulse_train
    params:
      - "1.0" # freq
      - EXPR(1.0 / CONST(sample_rate)) # duty
      - "5.0" # duration
  # - name: input
  #   sound_type: import_wav
  #   params:
  #     - .\wavs\84879__timkahn__what-if.wav
  #     - cubic
  - name: filter
    sound_type: butterworth_filter
    params:
      - input
      # The formula for normalising wasn't given in the text book. I just played
      # until I got a value close to -74dB in the pass band which is what
      # audacity shows when I analyse a pulse train.
      - "0.00000063" # normalize
      - "4" # n
      - EXPR(tan(440.0 / CONST(sample_rate) * 2.0 * CONST(pi) / 2.0)) # pole_r
      - EXPR(10.0^10.0) # zero_r (puts zero at -1)
  - name: output
    sound_type: export_wav
    params:
      - tmp/butterworth_low_pass_filter.wav
      - filter
root: output
