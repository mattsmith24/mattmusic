# A one-pole band-pass filter. Take a low pass filter with cutoff frequency at
# the desired bandwidth β. Rotate it in the Z coordinates by the center
# frequency ω. Create a conjugate pole to match it and multiply by normalising
# factor β ∗ (β + 2ω)
include:
patches:
sounds:
  - name: input
    sound_type: pulse_train
    params:
      - "1.0" # freq
      - EXPR(1.0 / CONST(sample_rate)) # duty
      - "5.0" # duration
  # - name: input
  #   sound_type: import_wav
  #   params:
  #     - .\wavs\84879__timkahn__what-if.wav
  #     - cubic
  - name: pole1
    sound_type: elementary_recirculating_filter
    params:
      - input
      - EXPR(1.0 - 100.0 / CONST(sample_rate) * 2.0 * CONST(pi)) # 1 - β
      - EXPR(440.0 / CONST(sample_rate) * 2.0 * CONST(pi)) # ω
  - name: pole1-conjugate
    sound_type: elementary_recirculating_filter
    params:
      - pole1
      - EXPR(1.0 - 100.0 / CONST(sample_rate) * 2.0 * CONST(pi)) # 1 - β
      - EXPR(-440.0 / CONST(sample_rate) * 2.0 * CONST(pi)) # ω
  - name: normalise
    sound_type: multiply
    params:
      - 0.0 pole1-conjugate
      - dc EXPR(100.0 * (100.0 + 2 * 440.0) / CONST(sample_rate)^2.0 * 4.0 * CONST(pi)^2.0 ) max
  - name: output
    sound_type: export_wav
    params:
      - tmp/one_pole_band_pass_filter.wav
      - normalise
root: output
